"package org.example;"
""
""
"public interface Command {"
"    void execute(String[] args);"
"}"
"package org.example;"
""
"import com.fasterxml.jackson.databind.ObjectMapper;"
"import java.io.BufferedReader;"
"import java.io.File;"
"import java.io.FileReader;"
"import java.io.FileWriter;"
"import java.io.IOException;"
"import java.util.ArrayList;"
"import java.util.List;"
""
"public class Export implements Command {"
"    @Override"
"    public void execute(String[] args) {"
"        if (args.length != 2) {"
"            System.out.println(\"Utilizare: export <cale>\");"
"            return;"
"        }"
""
"        String directoryPath = args[1];"
"        File directory = new File(directoryPath);"
""
"        if (!directory.isDirectory()) {"
"            System.out.println(\"Eroare: Calea specificată nu este un director.\");"
"            return;"
"        }"
""
"        ObjectMapper objectMapper = new ObjectMapper();"
"        File outputFile = new File(\"exported_classes.json\");"
""
"        try (FileWriter writer = new FileWriter(outputFile)) {"
"            // Obține o listă de fișiere .java din directorul specificat"
"            File[] javaFiles = directory.listFiles((dir, name) -> name.endsWith(\".java\"));"
""
"            if (javaFiles == null || javaFiles.length == 0) {"
"                System.out.println(\"Nu au fost găsite fișiere .java în directorul specificat.\");"
"                return;"
"            }"
""
"            for (File javaFile : javaFiles) {"
"                // Citeste fiecare linie din fișierul .java și scrie-o ca un obiect JSON pe o linie nouă în fișierul de ieșire"
"                try (BufferedReader reader = new BufferedReader(new FileReader(javaFile))) {"
"                    String line;"
"                    while ((line = reader.readLine()) != null) {"
"                        String jsonLine = objectMapper.writeValueAsString(line);"
"                        writer.write(jsonLine + \"\\n\");"
"                    }"
"                }"
"            }"
""
"            System.out.println(\"Conținutul fișierelor exportat cu succes în: \" + outputFile.getAbsolutePath());"
"        } catch (IOException e) {"
"            System.out.println(\"Eroare la exportul conținutului fișierelor: \" + e.getMessage());"
"        }"
"    }"
"}"
"package org.example;"
""
"import java.util.Scanner;"
""
""
"public class Main {"
"    public static void main(String[] args) {"
"        while (true) {"
"            System.out.print(\"Enter command: \");"
"            Scanner scanner = new Scanner(System.in);"
"            String input = scanner.nextLine();"
""
"            String[] parts = input.split(\" \", 2);"
"            String commandName = parts[0];"
""
"            Command command;"
"            switch (commandName.toLowerCase()) {"
"                case \"view\":"
"                    command = new View();"
"                    break;"
"                case \"report\":"
"                    command = new Report();"
"                    break;"
"                case \"export\":"
"                    command = new Export();"
"                    break;"
"                default:"
"                    System.out.println(\"Invalid command\");"
"                    System.out.println();"
"                    continue;"
"            }"
""
"            command.execute(parts);"
"        }"
"    }"
"}"
""
""
"/*"
""
"view C:\\Users\\IUSTIN\\Desktop\\JAVA\\Lab5_Homework\\exported_classes.json"
""
"report C:\\Users\\IUSTIN\\Desktop\\JAVA\\Lab5_Homework"
""
"export C:\\Users\\IUSTIN\\Desktop\\JAVA\\Lab5_Homework\\src\\main\\java\\org\\example"
""
" */"
"package org.example;"
""
"import java.io.BufferedWriter;"
"import java.io.File;"
"import java.io.FileWriter;"
"import java.io.IOException;"
"import java.text.SimpleDateFormat;"
""
"public class Report implements Command {"
"    @Override"
"    public void execute(String[] args) {"
"        if (args.length != 2) {"
"            System.out.println(\"Format: report <repository>\");"
"            return;"
"        }"
""
"        String repositoryPath = args[1];"
"        File repository = new File(repositoryPath);"
""
"        if (!repository.exists() || !repository.isDirectory()) {"
"            System.out.println(\"Invalid repository directory.\");"
"            return;"
"        }"
""
"        String outputPath = \"repository_hierarchy.html\";"
""
"        try {"
"            FileWriter fileWriter = new FileWriter(outputPath);"
"            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);"
""
"            bufferedWriter.write(\"<!DOCTYPE html>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"<html>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"<head>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"<title>Repository Hierarchy</title>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"</head>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"<body>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"<h1>Repository Hierarchy</h1>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"<ul>\");"
"            bufferedWriter.newLine();"
""
"            listFilesAndDirectories(repository, bufferedWriter, 1);"
""
"            bufferedWriter.write(\"</ul>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"</body>\");"
"            bufferedWriter.newLine();"
"            bufferedWriter.write(\"</html>\");"
""
"            bufferedWriter.close();"
""
"            System.out.println(\"Repository hierarchy saved to: \" + outputPath);"
"        } catch (IOException e) {"
"            System.out.println(\"Error saving repository hierarchy: \" + e.getMessage());"
"        }"
"    }"
""
"    private void listFilesAndDirectories(File directory, BufferedWriter writer, int depth) throws IOException {"
"        File[] files = directory.listFiles();"
""
"        if (files == null || files.length == 0) {"
"            return;"
"        }"
""
"        SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy, HH:mm:ss\");"
""
"        for (File file : files) {"
"            writer.write(\"<li>\");"
"            writer.newLine();"
""
"            writer.write(file.getName());"
"            writer.newLine();"
""
"            if (file.isDirectory()) {"
"                writer.write(\"<ul>\");"
"                writer.newLine();"
"                listFilesAndDirectories(file, writer, depth + 1);"
"                writer.write(\"</ul>\");"
"                writer.newLine();"
"            }"
""
"            writer.write(\"</li>\");"
"            writer.newLine();"
"        }"
"    }"
"}"
"package org.example;"
""
"import java.awt.Desktop;"
"import java.io.File;"
"import java.io.IOException;"
""
"public class View implements Command {"
"    @Override"
"    public void execute(String[] args) {"
"        if (args.length != 2) {"
"            System.out.println(\"Format: view <file>\");"
"            return;"
"        }"
""
"        String fileName = args[1];"
"        File file = new File(fileName);"
""
"        if (!file.exists()) {"
"            System.out.println(\"File not found: \" + fileName);"
"            return;"
"        }"
""
""
"        Desktop desktop = Desktop.getDesktop();"
"        try {"
"            desktop.open(file);"
"            System.out.println(\"Opened file: \" + fileName);"
"        } catch (IOException e) {"
"            System.out.println(\"Error opening file: \" + e.getMessage());"
"        }"
"    }"
"}"
